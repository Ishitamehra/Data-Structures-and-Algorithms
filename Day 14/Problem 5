/* Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character */

class Solution {
    public int minDistance(String word1, String word2) {
        
        int n=word1.length();
        int m=word2.length();
        int dp[][]=new int[n+1][m+1];

        for(int i=1;i<n+1;i++)
            dp[i][0]=i;

        for(int i=1;i<m+1;i++)
            dp[0][i]=i;

        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                char ch1=word1.charAt(i-1);
                char ch2=word2.charAt(j-1);

                if(ch1==ch2)
                {
                    dp[i][j]=dp[i-1][j-1];
                }
                else
                {
                    int val1=dp[i][j-1]+1;
                    int val2=dp[i-1][j]+1;
                    int val3=dp[i-1][j-1]+1;
                    dp[i][j]=Math.min(val3,Math.min(val1,val2));
                }
            }
        }
        return dp[n][m];
    }
}
