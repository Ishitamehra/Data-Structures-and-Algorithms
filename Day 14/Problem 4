/* Given two strings s and t, return the number of distinct subsequences of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.*/

class Solution {
    public int numDistinct(String s, String t) {
        
        int n=s.length();
        int m=t.length();
        int dp[][]=new int[n+1][m+1];

        for(int i=0;i<n+1;i++)
            dp[i][0]=1;

        for(int j=1;j<m+1;j++)
            dp[0][j]=0;

        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                char ch1=s.charAt(i-1);
                char ch2=t.charAt(j-1);
                if(ch1==ch2)
                {
                    dp[i][j]=dp[i-1][j-1]+dp[i-1][j];
                }
                if(ch1!=ch2)
                {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n][m];
    }
}
