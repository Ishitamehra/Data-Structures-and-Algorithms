/* Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s. */

class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        
        int n=str1.length();
        int m=str2.length();
        int dp[][]=new int[n+1][m+1];

        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                char ch1=str1.charAt(i-1);
                char ch2=str2.charAt(j-1);
                if(ch1==ch2)
                    dp[i][j]=1+dp[i-1][j-1];
                else
                {
                    int val1=dp[i-1][j];
                    int val2=dp[i][j-1];
                    dp[i][j]=Math.max(val1,val2);
                }
            }
        }

        String nstr="";
        int i=n;
        int j=m;

        while(i>0 && j>0)
        {
            char ch1=str1.charAt(i-1);
            char ch2=str2.charAt(j-1);

            if(ch1==ch2)
            {
                nstr=nstr+ch1;
                i--;
                j--;
            }
            else if(dp[i-1][j]>dp[i][j-1])
            {
                nstr=nstr+ch1;
                i--;
            }
            else
            {
                nstr=nstr+ch2;
                j--;
            }
        }

        while(i>0)
        {
            nstr=nstr+str1.charAt(i-1);
            i--;
        }

        while(j>0)
        {
            nstr=nstr+str2.charAt(j-1);
            j--;
        }

    System.out.println(nstr);
        String rstr="";
        int len=nstr.length();
        for(int k=len-1;k>=0;k--)
            rstr=rstr+nstr.charAt(k);

        return rstr;
    }
}
