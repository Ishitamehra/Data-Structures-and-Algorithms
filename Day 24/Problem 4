/* Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node. */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        
        if(root==null)
            return root;

        if(root.val==key)
            return helper(root);
        
        TreeNode curr=root;
        while(curr!=null)
        {
            if(curr.val>key)
            {
                if(curr.left!=null && curr.left.val==key)
                {
                curr.left=helper(curr.left);
                break;
                }
                else
                    curr=curr.left;
            }
            
            else
            {
                if(curr.right!=null && curr.right.val==key)
                {
                    curr.right=helper(curr.right);
                    break;
                }
                else
                    curr=curr.right;
                
            }
        }
        return root;
    }

    public TreeNode helper(TreeNode root)
    {
        if(root.left==null)
            return root.right;
        else if(root.right==null)
            return root.left;
        else
        {
        TreeNode rightn=root.right;
        TreeNode lastright=loop(root.left);
        lastright.right=rightn;
        //System.out.println(rightn.val);
        return root.left;
        }
    }

    public TreeNode loop(TreeNode root)
    {
        while(root.right!=null)
        {
            root=root.right;
        }
        System.out.println(root.val);
        return root;
    }
}
