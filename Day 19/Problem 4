/* Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between). */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {

        List<List<Integer>> list1=new ArrayList<>();
        if(root==null)
            return list1;
        
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        boolean flag=true;
        

        while(!q.isEmpty())
        {
            int size=q.size();
            int arr[]=new int[size];
            List<Integer> list=new ArrayList<>();
            for(int i=0;i<size;i++)
            {
                TreeNode curr=q.peek();
                TreeNode node=q.remove();
                int index=flag ? i :(size-1-i);
                arr[index]=curr.val;

                if(curr.left!=null)
                    q.add(curr.left);
                if(curr.right!=null)
                    q.add(curr.right);
            }
            for(int i=0;i<size;i++)
                list.add(arr[i]);
            
            list1.add(list);
            flag=!flag;
            
        }
        return list1;
    }
}
