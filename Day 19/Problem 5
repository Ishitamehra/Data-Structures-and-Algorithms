/* Given a Binary Tree, find its Boundary Traversal. The traversal should be in the following order: 

Left boundary nodes: defined as the path from the root to the left-most node ie- the leaf node you could reach when you always travel preferring the left subtree over the right subtree. 
Leaf nodes: All the leaf nodes except for the ones that are part of left or right boundary.
Reverse right boundary nodes: defined as the path from the right-most node to the root. The right-most node is the leaf node you could reach when you always travel preferring the right
subtree over the left subtree. Exclude the root from this as it was already included in the traversal of left boundary nodes. /*

class Solution
{
    ArrayList<Integer> list=new ArrayList<>();
	ArrayList <Integer> boundary(Node node)
	{
	    if(node==null)
	        return list;
	   
	    if(!isLeaf(node))
	        list.add(node.data);
	       
	    addleft(node.left);
	    //System.out.println(list);
	    addleaf(node);
	    //System.out.println(list);
	    addright(node.right);
	    //System.out.println(list);
	    
	    return list;
	}
	
	boolean isLeaf(Node node)
	{
	    if(node!=null && node.left==null && node.right==null)
	        return true;
	        
	    return false;
	}
	
	ArrayList <Integer> addleft(Node node)
	{
	    Node curr=node;
	    
	    while(curr!=null)
	    {
	        if(!isLeaf(curr))
	            list.add(curr.data);  
	        
	        if(curr.left!=null)
	            curr=curr.left;
	        else
	            curr=curr.right;
	    }
 
	    return list;
	}
	
	ArrayList <Integer> addright(Node node)
	{
	    ArrayList<Integer> temp=new ArrayList<>();
	    Node curr=node;
	    while(curr!=null)
	    {
	        if(!isLeaf(curr))
	            temp.add(curr.data);  
	        
	        if(curr.right!=null)
	            curr=curr.right;
	        else
	            curr=curr.left;
	    }
	    
	    for(int i=temp.size()-1;i>=0;i--)
	        list.add(temp.get(i));
	        
	    return list;
	}
	
	ArrayList <Integer> addleaf(Node node)
	{
	    if(node==null)
	        return list;
	    
	    if(isLeaf(node))
	        list.add(node.data);
	    
	    if(node.left!=null)
	        addleaf(node.left);
	    if(node.right!=null)
	        addleaf(node.right);
	        
	    return list;
	}
}
