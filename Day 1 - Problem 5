/* Design a data structure to implement a stack, using only deque (double-ended queue). It should support the following operations :

push(X): Pushes an element X into the stack. Returns true if the element is pushed into the stack, otherwise false.

pop(): Pops the top element from the stack. Returns -1 if the stack is empty, otherwise, returns the popped element.

top(): Returns the topmost element of the stack. In case the stack is empty, it returns -1.

isEmpty() : Returns true if the stack is empty, otherwise false.

size(): Returns the number of elements currently present in the stack.
Following type of queries denote these operations :

Type 1 : for push(X) operation.

Type 2 : for pop() operation.

Type 3 : for top() operation.

Type 4 : for isEmpty() operation.

Type 5 : for size() operation.*/

import java.util.* ;
import java.io.*; 
public class Stack {
	Deque<Integer> dq=new LinkedList<>();
	Stack() {
		Deque<Integer> dq;
	}

	// Pushes 'X' into the stack. Returns true if it gets pushed into the stack, and false otherwise.
	public boolean push(int x) {
		dq.addLast(x);
		return true;
	}

	// Pops top element from Stack. Returns -1 if the stack is empty, otherwise returns the popped element.
	public int pop() {
		if(dq.isEmpty())
			return -1;
		else
			return dq.removeLast();
	}

	// Returns the topmost element of the stack. In case the stack is empty, it returns -1.
	public int top() {
		if(dq.isEmpty())
			return -1;
		else
			return dq.getLast();
	}

	// Returns true if the stack is empty, otherwise false.
	public boolean isEmpty() {
		if(dq.isEmpty())
			return true;
		else
			return false;
	}

	// Returns the number of elements currently present in the stack.
	public int size() {
		return dq.size();
	}
}
