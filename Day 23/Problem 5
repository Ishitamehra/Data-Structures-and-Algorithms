/* Given a BST and a number X, find Ceil of X.
Note: Ceil(X) is a number that is either equal to X or is immediately greater than X.

If Ceil could not be found, return -1. */

/*
class Node {
    int data;
    Node left;
    Node right;
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}
*/
class Solution {
    // Function to find the minimum element in the given BST.
    int min=0;
    int minValue(Node root) {
        
        if(root.left==null)
            return root.data;
        else
            min=minValue(root.left);
            
        return min;
    }
}
