/* Given a binary tree and a node data called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.
Note: The tree contains unique values. */

class Solution
{
    /*class Node {
    	int data;
    	Node left;
    	Node right;
    
    	Node(int data) {
    		this.data = data;
    		left = null;
    		right = null;
    	}
    }*/
    public static Node findtarget(Node root,int target)
    {
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty())
        {
            Node curr=q.remove();
            
            if(curr.data==target)
                return curr;
            if(curr.left!=null)
                q.add(curr.left);
            if(curr.right!=null)
                q.add(curr.right);
        }
        return root;
    }
    
    public static int minTime(Node root, int target) 
    {
        
    if(root==null)
        return 0;

    Map<Node,Node> map=new HashMap<>();
    parents(root,map);
    Queue<Node> q=new LinkedList<>();
    Map<Node,Boolean> visited=new HashMap<>(); 
    Node targetNode=findtarget(root,target);
    q.add(targetNode);
    visited.put(targetNode,true);
    int level=-1;

    while(!q.isEmpty())
    {
        level++;
        int size=q.size();
        for(int i=0;i<size;i++)
        {
            Node curr=q.remove();
            if(curr.left!=null && visited.get(curr.left)==null)
            {
                q.add(curr.left);
                visited.put(curr.left,true);
            }
            if(curr.right!=null && visited.get(curr.right)==null)
            {
                q.add(curr.right);
                visited.put(curr.right,true);
            }
            if(map.get(curr)!=null && visited.get(map.get(curr))==null)
            {
                q.add(map.get(curr));
                visited.put(map.get(curr),true);
            }
        }
        
    }
    return level;
    }
    
    public static void parents(Node root, Map<Node,Node> map)
    {
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty())
        {
            Node curr=q.remove();
            if(curr.left!=null)
            {
                map.put(curr.left,curr);
                q.add(curr.left);
            }
            if(curr.right!=null)
            {
                map.put(curr.right,curr);
                q.add(curr.right);
            }
        }
    }
}
