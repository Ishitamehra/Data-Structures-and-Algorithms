/* Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

It is guaranteed that the answer will in the range of a 32-bit signed integer. */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Pair
{
    TreeNode Node;
    int w;
    Pair(TreeNode Node, int w)
    {
        this.Node=Node;
        this.w=w;
    }
}

class Solution {
    public int widthOfBinaryTree(TreeNode root) {

        if(root==null)
            return 0;
        
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(root,0));
        int max=0;

        while(!q.isEmpty())
        {
            int size=q.size();
            int minv=q.peek().w; 
            int first=0,last=0;           
            for(int i=0;i<size;i++)
            {
                Pair curr=q.remove();
                TreeNode node1=curr.Node;
                int w1=curr.w-minv;
                

                if(i==0)
                    first=w1;
                if(i==size-1)
                    last=w1;
                if(node1.left!=null)
                    q.add(new Pair(node1.left,w1*2+1));
                if(node1.right!=null)
                    q.add(new Pair(node1.right,w1*2+2));
            }

            int wid=last-first+1;
            
            max=Math.max(max,wid);
        }
        return max;

    }
}
