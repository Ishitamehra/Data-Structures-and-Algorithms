/* Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.  */

class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {

    List<Integer> list=new ArrayList<>();
    if(root==null)
        return list;

    Map<TreeNode,TreeNode> map=new HashMap<>();
    parents(root,map);
    Queue<TreeNode> q=new LinkedList<>();
    Map<TreeNode,Boolean> visited=new HashMap<>(); 
    q.add(target);
    visited.put(target,true);
    int level=0;

    while(!q.isEmpty())
    {
        int size=q.size();
        if(level==k)
            break;
        level++;

        for(int i=0;i<size;i++)
        {
            TreeNode curr=q.remove();
            if(curr.left!=null && visited.get(curr.left)==null)
            {
                q.add(curr.left);
                visited.put(curr.left,true);
            }
            if(curr.right!=null && visited.get(curr.right)==null)
            {
                q.add(curr.right);
                visited.put(curr.right,true);
            }
            if(map.get(curr)!=null && visited.get(map.get(curr))==null)
            {
                q.add(map.get(curr));
                visited.put(map.get(curr),true);
            }
        }
    }
    
    while(!q.isEmpty())
    {
        System.out.println(q.peek().val);
        list.add(q.remove().val);
    }
       return list; 
    }

    public void parents(TreeNode root, Map<TreeNode,TreeNode> map)
    {
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty())
        {
            TreeNode curr=q.remove();
            if(curr.left!=null)
            {
                map.put(curr.left,curr);
                q.add(curr.left);
            }
            if(curr.right!=null)
            {
                map.put(curr.right,curr);
                q.add(curr.right);
            }
        }
    }
}
