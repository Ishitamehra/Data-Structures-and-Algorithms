/* Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree. */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<inorder.length;i++)
            map.put(inorder[i],i);

        TreeNode root=build(inorder, 0,inorder.length-1, postorder, 0, postorder.length-1,map);
        return root;
    }

    public TreeNode build(int[] inorder, int instart,int inend, int[] postorder, int poststart,int postend, Map<Integer,Integer> map)
    {
        if(instart>inend || poststart>postend)
            return null;
        
        TreeNode root=new TreeNode(postorder[postend]);
        int rooti=map.get(root.val);
        int numleft=rooti-instart;

        root.left=build(inorder,instart,rooti-1,postorder, poststart, numleft+poststart-1,map);
        root.right=build(inorder,rooti+1,inend,postorder, numleft+poststart, postend-1,map);

        return root;
    }

}
