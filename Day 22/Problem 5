/* Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself. */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
        if(root==null)
            return "";

        StringBuilder s=new StringBuilder();
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);

        while(!q.isEmpty())
        {
            TreeNode curr=q.remove();
            if(curr==null)
                s.append("#,");
            else
            {
                s.append(curr.val+",");
                q.add(curr.left);
                q.add(curr.right);
            }
        }
        System.out.println(s);
        return s.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {

        if(data.isEmpty())
            return null;
        
        Queue<TreeNode> q=new LinkedList<>();
        StringBuilder s=new StringBuilder(data);
        

        int index=s.indexOf(",");
        String str=s.substring(0,index);
        s.delete(0,index+1);

        TreeNode root=new TreeNode(Integer.parseInt(str));
        q.add(root);

        while(!q.isEmpty())
        {
            TreeNode curr=q.remove();
            int index1=s.indexOf(",");
            str=s.substring(0,index1);
            s.delete(0,index1+1);

            if(!str.equals("#"))
            {
                TreeNode node=new TreeNode(Integer.parseInt(str));
                curr.left=node;
                q.add(node);
            }

            int index2=s.indexOf(",");
            str=s.substring(0,index2);
            s.delete(0,index2+1);

            if(!str.equals("#"))
            {
                TreeNode node=new TreeNode(Integer.parseInt(str));
                curr.right=node;
                q.add(node);
            }
            
        }
        System.out.print(root.val);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
