/* There are some natural number whose all permutation is greater than or equal to that number eg. 123, whose all the permutation (123, 231, 321) are greater than or equal to 123. 
Given a natural number n, the task is to count all such number from 1 to n.  /*

class GFG  
{ 
    // Return the count of the number having all 
    // permutation greater than or equal to the number. 
  
    static int countNumber(int n) 
    { 
        int result = 0; 
  
        // Pushing 1 to 9 because all number from 1 
        // to 9 have this property. 
        Stack<Integer> s = new Stack<>(); 
        for (int i = 1; i <= 9; i++)  
        { 
  
            if (i <= n) 
            { 
                s.push(i); 
                result++; 
            } 
  
            // take a number from stack and add 
            // a digit greater than or equal to last digit 
            // of it. 
            while (!s.empty()) 
            { 
                int tp = s.pop(); 
                 
                for (int j = tp % 10; j <= 9; j++)  
                { 
                    int x = tp * 10 + j; 
                    if (x <= n) { 
                        s.push(x); 
                        result++; 
                    } 
                } 
            } 
        } 
  
        return result; 
    } 
