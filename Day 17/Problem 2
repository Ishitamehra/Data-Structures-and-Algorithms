/* Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing. */

class Solution {
    public int findNumberOfLIS(int[] nums) {
        
        int n=nums.length;
        
        int dp[]=new int[n];
        int ct[]=new int[n];
        Arrays.fill(dp,1);
        Arrays.fill(ct,1);

        int max=1;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]>nums[j] && dp[i]<dp[j]+1)
                {
                    dp[i]=dp[j]+1;  //length
                    ct[i]=ct[j];   //location
                }
                else if(nums[i]>nums[j] && dp[i]==dp[j]+1)
                {
                    ct[i]=ct[j]+ct[i];
                }
            }
            if(dp[i]>max)
                max=dp[i];
        }
        
        int c=0;
        for(int i=0;i<n;i++)
        {
            if(dp[i]==max)
                c+=ct[i];
        }
        return c;
    }
}
