/* You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure. */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    static TreeNode first;
    static TreeNode middle;
    static TreeNode last;
    static TreeNode prev;
    public void recoverTree(TreeNode root) {
        first=middle=last=null;
        prev=new TreeNode(Integer.MIN_VALUE);

        inorder(root);
        if(last!=null && first!=null)
        {
            int t=last.val;
            last.val=first.val;
            first.val=t;
        }
        else if(first!=null && middle!=null)
        {
            int t=middle.val;
            middle.val=first.val;
            first.val=t;
        }
    }

    public static void inorder(TreeNode root)
    {
        if(root==null)
            return;

        inorder(root.left);

        if(prev!=null && prev.val>root.val)
        {
            if(first==null)
            {
                first=prev;
                middle=root;
            }
            else
                last=root;
        }

        prev=root;
        inorder(root.right);
    }
}
