/* You are given a connected undirected graph. Perform a Depth First Traversal of the graph.
Note: Use the recursive approach to find the DFS traversal of the graph starting from the 0th vertex from left to right according to the graph. */

class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    
    
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> list=new ArrayList<>();
        boolean visited[]=new boolean[V];
        dfs(visited, adj, 0, list);
        return list;
    }
    
    public void dfs(boolean[] visited, ArrayList<ArrayList<Integer>> adj, int curr, ArrayList<Integer> list)
    {
        list.add(curr);
        visited[curr]=true;
        
        for(int i=0;i<(adj.get(curr)).size();i++)
        {
            if(!visited[(adj.get(curr)).get(i)])
            {
                dfs(visited, adj, (adj.get(curr)).get(i), list);
            }
        }
    }
}
