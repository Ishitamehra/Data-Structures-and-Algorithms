/* You are given two strings s and t. Now your task is to print all longest common sub-sequences in lexicographical order.

Note -  A Sub-sequence is derived from another string by deleting some or none of the elements without changing the order of the remaining elements. */

class Solution
{
    public List<String> all_longest_common_subsequences(String s, String t)
    {
        int l1=s.length();
        int l2=t.length();
        int dp[][]=new int[l1+1][l2+1];
        
        for(int i=1;i<l1+1;i++)
        {
            for(int j=1;j<l2+1;j++)
            {
                char ch1=s.charAt(i-1);
                char ch2=t.charAt(j-1);
                if(ch1==ch2)
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    int val1=dp[i-1][j];
                    int val2=dp[i][j-1];
                    dp[i][j]=Math.max(val1,val2);
                }
                
            }
        }
        int lcs=dp[l1][l2];
        
        Character str[]=new Character[lcs];
        int index=lcs-1;
        int i=l1;
        int j=l2;
        
        while(i>0 && j>0)
        {
            char ch1=s.charAt(i-1);
            char ch2=t.charAt(j-1);
            if(ch1==ch2)
            {
                str[index]=ch1;
                index--;
                i--;
                j--;
            }
            else if(dp[i-1][j]>dp[i][j-1])
            {
                i--;
            }
            else
            {
                j--;
            }
        }
        ArrayList<String> fs=new ArrayList<>();
        for(int k=0;k<lcs;k++)
            fs.add(Character.toString(str[k]));
            
        return fs;
    }
}
