/* Given an integer array nums, return the length of the longest strictly increasing 
subsequence. */

class Solution {
    public int lengthOfLIS(int[] arr1) {
        
        int n=arr1.length;
        HashSet<Integer> set=new HashSet<>();
        
        for(int i=0;i<arr1.length;i++)
            set.add(arr1[i]);

        int m=set.size();
        int arr2[]=new int[m];
        int k=0;
        for(int i:set)
        {
            arr2[k]=i;
            k++;
        }

        Arrays.sort(arr2);     

        int dp[][]=new int[n+1][m+1];

        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                int v1=arr1[i-1];
                int v2=arr2[j-1];
                if(v1==v2)
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                {
                    int val1=dp[i-1][j];
                    int val2=dp[i][j-1];
                    dp[i][j]=Math.max(val1,val2);
                }
            }
        }

        return dp[n][m];
    }
}
