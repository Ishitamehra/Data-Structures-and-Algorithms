/* Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them. */\

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        
        int n=nums.length;
        Arrays.sort(nums);
        ArrayList<Integer> nlist=new ArrayList<>();
        ArrayList<Integer> list=new ArrayList<>();
        int max=Integer.MIN_VALUE;
        int last=0;
        int dp[]=new int[n];
        int hash[]=new int[n];

        for(int i=0;i<n;i++)
        {
            dp[i]=1;
            hash[i]=i;
        }

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]%nums[j]==0 && dp[i]<dp[j]+1)
                {
                    dp[i]=dp[j]+1;
                    hash[i]=j;
                }    
            }
            if(dp[i]>max)
            {
                max=dp[i];
                last=i;
            }
        }

        list.add(nums[last]);
        while(hash[last]!=last)
        {
            last=hash[last];
            list.add(nums[last]);
        }
        
        for(int i=0;i<max;i++)
            nlist.add(list.get(i));

        return nlist;
    }
}
