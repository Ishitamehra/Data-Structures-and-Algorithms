/* Given an integer n and an array of integers arr, return the Longest Increasing Subsequence which is Index-wise lexicographically smallest.
Note - A subsequence S1 is Index-wise lexicographically smaller than a subsequence S2 if in the first position where S1 and S2 differ, subsequence S1 has an element that appears earlier in the array  arr than the corresponding element in S2.
LIS  of a given sequence is defined as that longest possible subsequence all of whose elements are in increasing order. For example, the length of LIS for {10, 22, 9, 33, 21, 50, 41, 60, 80} is 6 and the LIS is {10, 22, 33, 50, 60, 80}.  */

class Solution {
    public ArrayList<Integer> longestIncreasingSubsequence(int n, int arr[]) {
        
        HashSet<Integer> set=new HashSet<>();
        
        for(int i=0;i<n;i++)
            set.add(arr[i]);
            
        int arr1[]=new int[set.size()];
        int j=0;
        for(int i:set)
        {
            arr1[j]=i;
            j++;
        }
        Arrays.sort(arr1);
        int m=arr1.length;
        
        int dp[][]=new int[n+1][m+1];
        for(int i=1;i<n+1;i++)
        {
            for(j=1;j<m+1;j++)
            {
                int v1=arr[i-1];
                int v2=arr1[j-1];
                if(v1==v2)
                {
                    dp[i][j]=dp[i-1][j-1]+1;
                }
                else
                {
                    int val1=dp[i-1][j];
                    int val2=dp[i][j-1];
                    dp[i][j]=Math.max(val1,val2);
                }
            }
        }
        int lcs=dp[n][m];
        
        int res[]=new int[lcs];
        int index=lcs-1;
        int i=n;
        j=m;
        
        while(i>0 && j>0)
        {
            int v1=arr[i-1];
            int v2=arr1[j-1];
            
            if(v1==v2)
            {
                res[index]=v1;
                index--;
                i--;
                j--;
            }
            else if(dp[i-1][j]>=dp[i][j-1])
            {
                    i--;
            }
            else
            {
                    j--;
            }
        }
        
        
        ArrayList<Integer> list=new ArrayList<Integer>();
        for(i=0;i<lcs;i++)
            list.add(res[i]);
            
        return list;
    }
}
