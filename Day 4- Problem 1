/* Given a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

We have to determine what is the earliest time after which all the oranges are rotten. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. */

class Pair
{
    int x;
    int y;
    Pair(int x,int y)
    {
        this.x=x;
        this.y=y;
    }
}

class Solution
{
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        Queue<Pair> q=new LinkedList<>();
        int r=grid.length;
        int c=grid[0].length;
        
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(grid[i][j]==2)
                    q.add(new Pair(i,j));
            }
        }
        q.add(new Pair(-1,-1));
        int count=0;
        
        while(!q.isEmpty())
        {
           Pair p=q.peek();
           int i=p.x;
           int j=p.y;
           
           if(i==-1 && j==-1 && q.size()==1)
            {
                q.remove();
                break;
            }
            else if(i==-1 && j==-1 && q.size()>1)
            {
                count++;
                q.remove();
                q.add(new Pair(-1,-1));
            }
            else
            {
                if((i-1)>=0 && grid[i-1][j]==1)
                {
                    grid[i-1][j]=2;
                    q.add(new Pair(i-1,j));
                }
                if((i+1)<r && grid[i+1][j]==1)
                {
                    grid[i+1][j]=2;
                    q.add(new Pair(i+1,j));
                }
                if((j-1)>=0 && grid[i][j-1]==1)
                {
                    grid[i][j-1]=2;
                    q.add(new Pair(i,j-1));
                }
                if((j+1)<c && grid[i][j+1]==1)
                {
                    grid[i][j+1]=2;
                    q.add(new Pair(i,j+1));
                }
                q.remove();
                
            }
        }
        
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (grid[i][j] == 1) {
                    return -1;
                }
            }
        }
        
                return count;        
    }
}
