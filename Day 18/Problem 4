/* Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level). */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {

        List<Integer> list=new ArrayList<>();
        List<List<Integer>> list2=new ArrayList<List<Integer>>();
        if(root==null)
            return list2;
        
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        int c=1;
        q.add(null);

        while(!q.isEmpty())
        {
            TreeNode curr=(q.remove());
            if(curr==null)
            {
                if(q.isEmpty())
                {
                    list2.add(list);
                    break;
                }
                else
                {
                    q.add(null);
                    list2.add(list);
                    list=new ArrayList<>();
                }
            }
            else
            {
                list.add(curr.val);
                System.out.println(list);
                if(curr.left!=null)
                    q.add(curr.left);
                
                if(curr.right!=null)
                    q.add(curr.right);
            }
        }
        
        //list2.add(list);
        
        return list2;
    }
}
