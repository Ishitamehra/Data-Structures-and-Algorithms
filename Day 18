/* You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely. */

class Solution {
    public int maxCoins(int[] nums) {
        
        int n1=nums.length;
        int n2=n1+2;

        int num2[]=new int[n2];
        num2[0]=1;
        num2[n2-1]=1;
        for(int i=1;i<n2-1;i++)
            num2[i]=nums[i-1];
        
        int dp[][]=new int[n2][n2];
        for(int i=n1;i>=1;i--)
        {
            for(int j=1;j<=n1;j++)
            {
                if(i>j) continue;
                int max=Integer.MIN_VALUE;
                for(int k=i;k<=j;k++)
                {
                    int cost=(num2[i-1]*num2[k]*num2[j+1])+dp[i][k-1]+dp[k+1][j];
                    max=Math.max(max,cost);
                }
                dp[i][j]=max;
            }
        }
        return dp[1][n1];
        
    }
}
