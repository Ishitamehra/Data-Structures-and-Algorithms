/* Given the root of a binary tree, return the preorder traversal of its nodes' values. */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> list=new ArrayList<>(); // used new function bcoz Each recursive call
        // to preorderTraversal creates a new list and does not use the same list
        // to accumulate the results.
        return preorder(root,list);

    }

    public List<Integer> preorder(TreeNode root, List<Integer> list)
    {
        if(root==null)
            return list;

        list.add(root.val);
        preorder(root.left, list);
        preorder(root.right,list);

        return list;
    }
}
