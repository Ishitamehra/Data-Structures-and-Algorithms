/* You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations./*

class Solution {
    public int characterReplacement(String s, int k) {
        
        int left=0,right=0;
        int maxfreq=0;
        int maxlen=0,len=0;

        Map<Character,Integer> map=new HashMap<>();
        while(right<s.length())
        {
            map.put(s.charAt(right),map.getOrDefault(s.charAt(right),0)+1);
            int freq=map.get(s.charAt(right));
            maxfreq=Math.max(maxfreq,freq);
            int count=(right-left+1)-maxfreq;

            if(count>k)
            {
                map.put(s.charAt(left),map.get(s.charAt(left))-1);
                left++;
            }
            else
            {
                len=right-left+1;
                maxlen=Math.max(maxlen,len);
            }
            right++;
        }
        return maxlen;
    }
}
