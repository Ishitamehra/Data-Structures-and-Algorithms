/* Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial). */

class Solution {
    public boolean isMatch(String s, String p) {
        
        int n=s.length();
        int m=p.length();
        boolean dp[][]=new boolean[n+1][m+1];

        dp[0][0]=true;

        for(int i=1;i<n+1;i++)
            dp[i][0]=false;

        for(int i=1;i<m+1;i++)
        {
            if(p.charAt(i-1)=='*')
                dp[0][i]=dp[0][i-1];
        }
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<m+1;j++)
            {
                char ch1=s.charAt(i-1);
                char ch2=p.charAt(j-1);

                if(ch1==ch2 || ch2=='?')
                    dp[i][j]=dp[i-1][j-1];
                else if(ch2=='*')
                {
                    dp[i][j]=dp[i-1][j]||dp[i][j-1];
                }
                else
                    dp[i][j]=false;
            }
        }
        
        return dp[n][m];
    }
}
