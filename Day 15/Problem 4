/* You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). */

class Solution {
    public int maxProfit(int[] prices) {
        
        int n=prices.length;  
        int dp[][][]=new int[n+1][2][3];

        for(int buy=0;buy<=1;buy++)
        {
            for(int cap=0;cap<=2;cap++)
            {
                dp[n][buy][cap]=0;
            }
        }

        for(int ind=0;ind<n;ind++)
        {
            for(int buy=0;buy<=1;buy++)
            {
                dp[ind][buy][0]=0;
            }
        }

        int profit=0;
        for(int ind=n-1;ind>=0;ind--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                for(int cap=1;cap<=2;cap++)
                {
                    if(buy==1)//can buy
                    {
                        profit=Math.max(-prices[ind]+dp[ind+1][0][cap],0+dp[ind+1][1][cap]);
                    }
                    else
                    {
                        profit=Math.max(prices[ind]+dp[ind+1][1][cap-1],0+dp[ind+1][0][cap]);
                    }
                    dp[ind][buy][cap]=profit;
                }
            }
        }
        return dp[0][1][2];
    }
}
