/* You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). */

class Solution {
    public int maxProfit(int k, int[] prices) {
        
        int n=prices.length;
        int dp[][][]=new int[n+1][2][k+1];

        for(int ind=0;ind<n;ind++)
        {
            for(int buy=0;buy<=1;buy++)
            {
                dp[ind][buy][0]=0;
            }
        }

        for(int buy=0;buy<=1;buy++)
        {
            for(int cap=0;cap<=k;cap++)
            {
                dp[n][buy][cap]=0;
            }
        }

        int profit=0;
        for(int ind=n-1;ind>=0;ind--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                for(int cap=1;cap<=k;cap++)
                {
                    if(buy==1)
                    {
                        profit=Math.max(0+dp[ind+1][1][cap],-prices[ind]+dp[ind+1][0][cap]);
                    }
                    else
                    {
                        profit=Math.max(0+dp[ind+1][0][cap],prices[ind]+dp[ind+1][1][cap-1]);
                    }
                    dp[ind][buy][cap]=profit;
                }
            }
        }
        return dp[0][1][k];
    }
}
