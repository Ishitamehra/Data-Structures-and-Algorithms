/* Given an infix expression in the form of string str. Convert this infix expression to postfix expression.

Infix expression: The expression of the form a op b. When an operator is in-between every pair of operands.
Postfix expression: The expression of the form a b op. When an operator is followed for every pair of operands.
Note: The order of precedence is: ^ greater than * equals to / greater than + equals to -. Ignore the right associativity of ^. */

class Solution {
    // Function to convert an infix expression to a postfix expression.
    
    public static int Prec(char ch)
    {
        if(ch=='^')
            return 3;
        if(ch=='*' || ch=='/')
            return 2;
        if(ch=='+' || ch=='-')
            return 1;
        return -1;
    }
    
    public static String infixToPostfix(String exp) {
        
        Stack<Character> st=new Stack<>();
        String str="";
        for(int i=0;i<exp.length();i++)
        {
            char ch=exp.charAt(i);
            if(Character.isLetterOrDigit(ch))
            {
                str=str+ch;
            }
            else if(ch=='(')
                st.push(ch);
            else if(ch==')')
            {
                while(!st.empty() && st.peek()!='(')
                {
                    str=str+st.pop();
                }
                st.pop();
            }
            else
            {
                while(!st.empty() && Prec(ch)<=Prec(st.peek()))
                {
                    str=str+st.pop();
                }
                st.push(ch);
            }
        }
        
        while(!st.empty())
        {
            str=str+st.pop();
        }
        return str;
    }
}
