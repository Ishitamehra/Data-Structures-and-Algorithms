/* Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result. */

class Solution {
    public int myAtoi(String s) {
        
        int idx=0;
        int n=s.length();
        int sign=1;

        if(n==0)
            return 0;

        while(idx<n && s.charAt(idx)==' ')
            idx++;

        if(idx<n && (s.charAt(idx)=='-' || s.charAt(idx)=='+'))
        {
            if(s.charAt(idx)=='-')
                sign=-1;
            else if(s.charAt(idx)=='+')
                sign=1;
            idx++;
        }

        long result=0;
        while(idx<n && Character.isDigit(s.charAt(idx)))
        {
            char ch=s.charAt(idx);
            int digit=ch-'0'; 
            
            if (result > (Integer.MAX_VALUE - digit) / 10) {
                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            }

            result=result*10+(long)digit;
            idx++;    
        }
        

        if(result>Integer.MAX_VALUE || result<Integer.MIN_VALUE)
            return sign==-1? Integer.MIN_VALUE:Integer.MAX_VALUE;

        return sign*(int)result;
    }
}
