/* Given an integer K and a queue of integers, we need to reverse the order of the first K elements of the queue, leaving the other elements in the same relative order.

Only following standard operations are allowed on queue.

enqueue(x) : Add an item x to rear of queue
dequeue() : Remove an item from front of queue
size() : Returns number of elements in queue.
front() : Finds front item.
Note: The above operations represent the general processings. In-built functions of the respective languages can be used to solve the problem.*/

class GfG {
    // Function to reverse first k elements of a queue.
    public Queue<Integer> modifyQueue(Queue<Integer> q, int k) {
        
        Queue<Integer> q1=new LinkedList<>();
        Stack<Integer> st=new Stack<>();
        int size=q.size();
        
        for(int i=0;i<k;i++)
        {
            st.add(q.remove());
        }
        
    
        for(int i=0;i<size;i++)
        {
            if(i<k)
            {
                q1.add(st.pop());
            }
            else
                q1.add(q.remove());
        }
        return q1;
    }
}
